
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mjkpgrbguihbbmzqsceb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qa3BncmJndWloYmJtenFzY2ViIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNzk2MTgsImV4cCI6MjA2MTc1NTYxOH0.8puVMXpk2YG0LEoEpJWvMB_K-PBCsTl4FH2nFO647lM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Helper function to determine if we're in a browser environment
const isBrowser = () => typeof window !== 'undefined';

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: isBrowser() ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Function to clean up any orphaned auth sessions
export const cleanupAuthState = () => {
  if (!isBrowser()) return;
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Do the same for sessionStorage if used
  Object.keys(sessionStorage || {}).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      sessionStorage.removeItem(key);
    }
  });
};
